1. [245. 子树]
描述:
有两个不同大小的二叉树： T1 有上百万的节点； T2 有好几百的节点。请设计一种算法，判定 T2 是否为 T1的子树。
注意事项:
若 T1 中存在从节点 n 开始的子树与 T2 相同，我们称 T2 是 T1 的子树。也就是说，如果在 T1 节点 n 处将树砍断，砍断的部分将与 T2 完全相同。
样例:
下面的例子中 T2 是 T1 的子树：
       1                3
      / \              / 
T1 = 2   3      T2 =  4
        /
       4
下面的例子中 T2 不是 T1 的子树：

       1               3
      / \               \
T1 = 2   3       T2 =    4
        /
       4
 
2. 代码
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */


public class Solution {
    /*
     * @param T1: The roots of binary tree T1.
     * @param T2: The roots of binary tree T2.
     * @return: True if T2 is a subtree of T1, or false.
     */
    public boolean isSubtree(TreeNode T1, TreeNode T2) {
        // write your code here
        return helper1(T1, T2);
    }
    private static boolean helper1(TreeNode t1, TreeNode t2) {
        // 遍历t1节点
        // 判断是否和t2相同, 如果相等, 则不再遍历, 反之继续
        if (helper2(t1, t2)) {
            return true;
        }
        if (t1 != null) {
            if (helper1(t1.left, t2)) {
                return true;
            }
            if (helper1(t1.right, t2)) {
                return true;
            }
        }
        return false;

    }

    private static boolean helper2(TreeNode t1, TreeNode t2) {
        if (t1 == t2) {
            return true;
        }
        if (t1 == null || t2 == null) {
            return false;
        }
        if (t1.val != t2.val) {
            return false;
        }
        if (!helper2(t1.left, t2.left)) {
            return false;
        }
        if (!helper2(t1.right, t2.right)) {
            return false;
        }
        return true;
    }
}
